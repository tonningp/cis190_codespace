import os
import re
import tarfile
import tempfile
from io import BytesIO
from typing import List
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi import File, UploadFile, Form
from pydantic import BaseModel, Field
import httpx
from dotenv import load_dotenv
import magic  # for MIME type detection

load_dotenv()


OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
VALID_TOKENS = set(os.getenv("VALID_USER_TOKENS", "").split(","))
app = FastAPI()
KEY_DIR = "submitted_keys"
os.makedirs(KEY_DIR, exist_ok=True)

class SSHKeySubmission(BaseModel):
    student_id: str = Field(..., pattern=r"^[a-zA-Z0-9_\-\.@]+$", min_length=3, max_length=64)
    ssh_key: str

def is_valid_ssh_key(key: str) -> bool:
    return bool(re.match(r"^ssh-(rsa|ed25519|ecdsa) [A-Za-z0-9+/=]+( .*)?$", key.strip()))

@app.get("/")
async def root():
    return {"status": "alive"}

@app.post("/submit-key")
async def submit_key(submission: SSHKeySubmission, request: Request):
    student_id = submission.student_id.strip()
    ssh_key = submission.ssh_key.strip()

    if not is_valid_ssh_key(ssh_key):
        raise HTTPException(status_code=400, detail="Invalid SSH public key format.")

    path = os.path.join(KEY_DIR, f"{student_id}.pub")
    if os.path.exists(path):
        raise HTTPException(status_code=409, detail="Key already submitted for this student ID.")

    with open(path, "w") as f:
        f.write(ssh_key + "\n")

    with open("authorized.log", "a") as log:
        client_ip = request.client.host
        log.write(f"{student_id} from {client_ip}: {ssh_key[:40]}...\n")

    return {"message": "SSH key submitted successfully"}



UPLOAD_DIR = "submitted_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

@app.post("/submit-file")
async def submit_file(student_id: str = Form(...), file: UploadFile = File(...)):
    # Construct unique destination
    filename = file.filename
    destination = os.path.join(UPLOAD_DIR, filename)

    # Save the uploaded file
    with open(destination, "wb") as buffer:
        content = await file.read()
        buffer.write(content)

    # Log the upload
    with open("authorized.log", "a") as log:
        log.write(f"{student_id} uploaded {filename}\n")

    return {"message": f"File {file.filename} submitted by {student_id}"}

## Endpoint to announcement service
@app.get("/announce-current")
async def announce_current():
    return {"message": "Current Announcements"}

## Endpoint to quiz service
@app.get("/quiz")
async def quiz():
    return {"message": f"Current quiz"}

## Endpoint to gots service
@app.get("/submit-gots")
async def submit_gots():
    return {"message": "Submit GOTS"}

system_prompt = (
    """
Your additional instructions are to be helpful assistant for the provided course name. 
- The exercise name is provided below.
- If there is a question about the exercise name, you will provide the exercise name.
- If there is a question about assignment submission, you will provide information on how to submit assignments.
- If there is a question about how to exit this shell, tell them to type exit or press Ctrl-D.
- Assignment submission in this context is always through the Lab Manager program that the student is currently using.
- The prompt context is provided below.
- always use the provided context to generate your responses.
- always refer to the prompt context as 'What is required'
- The expected response is provided below.
- Always address the student by their first name.
- You are allowed to answer questions about the course
- remind students of important deadlines
- remind students to use the man command for specific commands
- provide information on how to submit assignments
- assist with general inquiries related to the course.
- Your responses should be concise and relevant to the course logistics and procedures.
- If the activity type is gots, you will be asked to generate a response based
on the provided prompt and files.
- If the activity type is summarize-tar, you will summarize the contents of a
- If the activity type is lesson, you will provide a brief overview of the
lesson and provide help with the expected response.
- Do not provide any personal opinions or engage in discussions outside the
course context, except if it is anything monty python , or hitchhiker's guide to
the galaxy related.
- if the student asks anything about the activity type, the prompt context, or
the exercise name, you will provide what is provided below.
- The shell history file for the context is provided below, use this as context for your responses.
- If the shell history file is empty, you will not use it as context.
- If the shell history file has the expected response you can give the student the expected response.
- The chat history is provided named with the exercise name, use this as context for your responses.
- The expected response may be a regular expression, if so, you will parse it to use as context for your responses.
- If the activity type is quiz, under no circumstances are you to give help which would reveal what is required for the expected response, do not provide the expected response. These are the exceptions (request for chat history). For the activity type of quiz, you can provide a hint that is similar.  Gently remind the student that they should not ask for specific help with the quiz.
- Under no circumstances are you to suggest that a command like sh mkdir -p dirname or bash mkdir -p dirname is a valid command, this is not a valid command in the context of the course.  Scripts yes, but not built-in or binary commands. 
"""
)
class PromptRequest(BaseModel):
    prompt: str

@app.post("/ask")
async def ask_openai(
    request: Request,
    prompt: str = Form(...),
    first_name: str = Form(...),
    last_name: str = Form(...),
    student_id: str = Form(...),
    exercise_name: str = Form(...),
    task_number: int = Form(...),
    total_tasks: int = Form(...),
    prompt_context: str = Form(default=""),
    expected_response: str = Form(default=""),
    directory_context: str = Form(default=""),
    activity_type: str = Form(default=""),
    files: List[UploadFile] = File(default=[])
):
    # Authorization
    token = request.headers.get("Authorization")
    if not token or token.replace("Bearer ", "") not in VALID_TOKENS:
        raise HTTPException(status_code=401, detail="Invalid or missing token")

    # Read and append file content to the prompt
    file_texts = []
    for f in files:
        content = await f.read()
        try:
            decoded = content.decode("utf-8")
        except UnicodeDecodeError:
            decoded = content.decode("latin1", errors="ignore")
        file_texts.append(f"\n\n--- File: {f.filename} ---\n{decoded}")
    filetext = '\n\n'.join([f for f in file_texts])
    # Send to OpenAI
    try:
        async with httpx.AsyncClient() as client:
            student_info = f"Student: {first_name}"
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENAI_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "gpt-4o",
                    "messages": [
                        {"role": "system", "content": f"You are a helpful assistant for a lesson named {exercise_name}."},
                        {"role": "system", "content": f"activity type is {activity_type}"},
                        {"role": "system", "content": f"directory context is {directory_context}"},
                        {"role": "system", "content": system_prompt},
                        {"role": "system", "content": f"student's first name is {first_name}"},
                        {"role": "system", "content": f"student's last name is {last_name}"},
                        {"role": "system", "content": f"exercise name is {exercise_name}"},
                        {"role": "system", "content": f"prompt context is {prompt_context}"},
                        {"role": "system", "content": f"expected response is {expected_response}"},
                        {"role": "system", "content": f"The file text for this context is {filetext}"},
                        {"role": "system", "content": f"If the user prompt is 'print log' then return {filetext}"},
                        {"role": "system", "content": f"the task number is {task_number} and the total tasks are {total_tasks}"},
                        {"role": "user", "content": prompt}
                        ]
                }
            )
        response.raise_for_status()
        result = response.json()
        message = result["choices"][0]["message"]["content"]
    except httpx.HTTPStatusError as e:
        raise HTTPException(status_code=e.response.status_code, detail=e.response.text)
    except httpx.RequestError as e:
        print(f"Request failed: {e}")
        await asyncio.sleep(2 * (attempt + 1))
    except httpx.HTTPStatusError as e:
        print(f"HTTP error: {e.response.status_code}")
        if e.response.status_code in (429, 500, 502, 503):
            await asyncio.sleep(2 * (attempt + 1))
        else:
            raise
    except httpx.ReadTimeout as e:
        raise HTTPException(status_code=504, detail="OpenAI request timed out")

    # Return response as downloadable text file
    filename = "gots_response.txt"
    content_stream = BytesIO(message.encode("utf-8"))
    return Response(
        content=content_stream.getvalue(),
        media_type="text/plain",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )

@app.post("/summarize-tar")
async def summarize_tar(
    request: Request,
    archive: UploadFile = File(...),
    description: str = Form(default="Please summarize the contents of this archive.")
):
    # üîê Check token
    token = request.headers.get("Authorization", "").replace("Bearer ", "")
    if token not in VALID_TOKENS:
        raise HTTPException(status_code=401, detail="Invalid or missing token")

    # üì¶ Read uploaded file
    content = await archive.read()

    # üß™ Detect MIME type
    mime_type = magic.from_buffer(content, mime=True)
    if mime_type not in ("application/x-gzip", "application/gzip"):
        raise HTTPException(status_code=400, detail=f"Unsupported file type: {mime_type}")

    # üìÇ Extract tar.gz or .tgz in-memory
    summary_lines = []
    previews = []
    buffer = BytesIO(content)

    with tempfile.TemporaryDirectory() as tmpdir:
        try:
            with tarfile.open(fileobj=buffer, mode="r:gz") as tar:
                tar.extractall(path=tmpdir)
                members = tar.getmembers()
                summary_lines.append(f"The archive contains {len(members)} files:")
                for m in members:
                    summary_lines.append(f"- {m.name} ({m.size} bytes)")
        except tarfile.TarError as e:
            raise HTTPException(status_code=400, detail=f"Failed to extract archive: {e}")

        # üìÑ Try to preview text files
        for root, _, files in os.walk(tmpdir):
            for fname in files:
                path = os.path.join(root, fname)
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        snippet = f.read(300)
                        previews.append(f"\n--- {fname} ---\n{snippet.strip()}")
                except Exception:
                    continue  # skip binary or unreadable files

    # üß† Construct GPT prompt
    prompt = description + "\n\n" + "\n".join(summary_lines + previews[:5])

    # üõ∞Ô∏è Send to OpenAI (GPT-4o)
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://api.openai.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
            json={
                "model": "gpt-4o",  # ‚Üê Using GPT-4o here
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}]
            }
        )

    response.raise_for_status()
    gpt_summary = response.json()["choices"][0]["message"]["content"]

    # üíæ Return as downloadable .txt file
    return Response(
        content=gpt_summary.encode("utf-8"),
        media_type="text/plain",
        headers={"Content-Disposition": 'attachment; filename="summary.txt"'}
    )
