#!/bin/bash
START_DATE="2025-06-23"
#START_DATE="2025-05-08"
export TZ="America/Los_Angeles"

export TOP_DIR="$(dirname "$(realpath "$0")")"
cp $TOP_DIR/tmux.conf ~/.tmux.conf
if [[ ! -d "$TOP_DIR/venv" ]];then
(cd $TOP_DIR;python3 -m venv venv&&source venv/bin/activate&&pip install -r requirements.txt)
fi
source "$TOP_DIR/venv/bin/activate"
export PROFILE_DB="${TOP_DIR}/../.db/profile.sqlite3"
export DEBUG="${TOP_DIR}/debug.txt"
export MISSION_DIR="$(dirname "$TOP_DIR")/missions"

# Reference start date (week 1)
# ---- EXTRACT STUDENT ID ----
if [[ -f "$PROFILE_DB" ]]; then
  export STUDENT_ID=$(sqlite3 "$PROFILE_DB" "SELECT id FROM students LIMIT 1;")
  export FIRSTNAME=$(sqlite3 "$PROFILE_DB" "SELECT firstname FROM students LIMIT 1;")
  export LASTNAME=$(sqlite3 "$PROFILE_DB" "SELECT lastname FROM students LIMIT 1;")
  export COURSE_NAME="CIS190 - Introduction to Linux"
  if [[ -z "$STUDENT_ID" ]]; then
    echo "[!] student_id not found in $PROFILE_DB"
    exit 1
  fi
else
  echo "[!] Profile database not found at $PROFILE_DB"
  exit 1
fi
if [ -z "$TMUX" ]; then
    export TERM=tmux-256color
    exec tmux new-session "$0"
fi

# Today's date
export TODAY=$(date +%Y-%m-%d)
# Get number of days since start
export DAYS_ELAPSED=$(( ( $(date -d "$TODAY" +%s) - $(date -d "$START_DATE" +%s) ) / 86400 ))
# Week number (week 1 starts at 0 days)
export WEEK_NUMBER=$(( (DAYS_ELAPSED / 7) + 1 ))

INTERRUPTED=0
yesno() {
    TERM=tmux-256color DIALOGRC="${TOP_DIR}/dialogrc" \
    dialog --clear \
           --backtitle "${1:-Confirmation}" \
           --title "${2:-Confirmation}" \
           --yesno "${3:-Do you want to resume the labs?}" "${4:-7}" "${5:-50}" \
           > /dev/tty

    response=$?
    #echo "DEBUG: User response in yesno: $response" >> "$DEBUG"
    echo $response
}

export -f yesno
on_sigint_top() {
    if [[ $INTERRUPTED -eq 1 ]]; then
        INTERRUPTED=0  # Reset the interrupted flag
    else
        clear  # Clears the dialog UI after it exits
        response="$(yesno 'Exit?' 'Exit?' 'You pressed Ctrl+C.\nDo you want to exit the lab?')"
        echo "DEBUG: User response in on_sigint_top: $response" >> "$DEBUG"
        if [[ $response -eq "0" ]]; then
            exit 0
        fi
    fi
	main
}

run_module_start() {
    # To reset tracker file, uncomment the next line
    RESET_PROGRESS=1 run_module $1

    #run_module $1
}

trap 'on_sigint_top' SIGINT
main() {
	# Your script body here


	display_modules() {
        BOLD_YELLOW_ON_BLACK='\e[1;33;40m'
        RESET='\e[0m'

	    # Collect module list (strip ./, keep relative paths)
        cd "$(dirname "$TOP_DIR")/missions" || exit 1
        # these are the actual directories that contain modules
        # they are in the format week_1/module_1, week_1/module_2, etc.
        # they are sorted by week number and module number
	    mapfile -t module_dirs < <(
                              for f in week*; do
                                  for m in "$f"/*; do
                                    [ -d "$m" ] && echo "$f/$(basename "$m")"
                                  done
                             done | sed 's|^\./||' | sort -u)

          # these are the module names with completion status
          # and week number
          # if the module is completed, it will show the completion date
          # if not, it will show a yellow asterisk
          # if the module is for the current week, it will be highlighted in bold magenta
	    mapfile -t modules < <(
                                 for d in week*/*; do
                                     if [[ -f $d/home/.completed ]]; then
                                         post=" \Z2Completed\Zn - \Zb\Z7$(cat $d/home/.completed)\Zn" # green text
                                     else
                                         post=" \Z3*\Zn" # yellow text
                                     fi
                                     if echo $d | grep -q "week_${WEEK_NUMBER}" ; then
                                         post=" \Zb\Z5<\Zn${post}"
                                     fi
                                     week="$(basename "$(dirname "$d")" | sed 's/_/ /g')"
                                     module=$(basename "$d" | sed 's/_/ /g')
                                     # make week and module names capitalized
                                     echo "${week^} - ${module^}${post}"
                                  done | sed 's|^\./||' | sort -u)

                              #for f in week*; do
                              #    for m in "$f"/*; do
                              #        [ -d "$m" ] && echo "$f - $(basename "$m" | sed 's/_/ /g')"
                              #    done

	    module_dirs=("Quit" "${module_dirs[@]}")  # Add "Quit" option at the beginning
	    modules=("Quit" "${modules[@]}")  # Add "Quit" option at the beginning
        default_item=$(( (WEEK_NUMBER - 1) * 2 + 1 ))
	    # Exit if no modules found
	    if [[ ${#modules[@]} -eq 0 ]]; then
		    echo "No modules found."
            exit 1
	    fi

	    # Build options array for dialog (tag=number, item=path)
	    OPTIONS=()
	    for i in "${!modules[@]}"; do
		OPTIONS+=("$i" "${modules[$i]}")
	    done
	    # Show dialog menu
        selection=$( \
          DIALOGRC=${TOP_DIR}/dialogrc \
          dialog --clear \
          --default-item "$default_item" \
          --colors \
          --backtitle "\Z6Student:\Zn \Zb${FIRSTNAME} ${LASTNAME}\Zn - \Z6Course:\Zn \Zb${COURSE_NAME}\Zn" \
          --title " (${TODAY}) - \Zb\Z7Hello ${FIRSTNAME}\Zn this is \Zb\Z7WEEK # ${WEEK_NUMBER}\Zn " \
          --menu "\n\ZbChoose a Week and Module\Zn\nUse arrow keys to select then press Enter.\nSelecting with the mouse also works.\n" 25 70 12 \
          "${OPTIONS[@]}" \
          2>&1 > /dev/tty )

	    echo "${module_dirs[$selection]}"
	}

	target_dir=""
	echo "üöÄ Starting the exercises ..."
	if [[ $# -ne 0 ]]; then
	  echo "Usage: $0"
	  target_dir=$1
	fi
	module=$(display_modules)
	export module
	while [[ -n "$module" && "$module" != 'Quit' ]]; do
	   # Define signal trap for SIGINT (^C)
	    cd $MISSION_DIR || exit 1
        cd "$module" || exit 1
	    #cd "$module"
	    source "$TOP_DIR/environment.sh"
	    if [[ ${BASE_DIR} != *module* ]]; then
	      echo "‚ùå This script must be run in a module directory."
	      echo "Please navigate to a module directory and try again."
	      echo $(ls -1 ${BASE_DIR})
	      exit 1
	    fi
	    run_module_start $module
        status=$?
        if [[ $status -eq 130 ]]; then
            INTERRUPTED=1  # Tell parent loop we got SIGINT
        fi
	    clear && tput sgr0
	    module=$(display_modules)
	done
	clear
}

main
