#!/bin/bash
# This script is part of the lab management system.
# It allows users to run modules, track progress, and manage lab exercises.
# Usage: run_module.sh [module_name]
# Author: Paul Tonning
#
#
count_completed_modules() {
    local count=0
    for mod in "${MODULES[@]}"; do
        if grep -Fq "^$mod" "$TRACKER_FILE" 2>/dev/null; then
            ((count++))
        fi
    done
    echo "$count"
}

show_progress_gauge() {
    #echo "DEBUG: Showing progress gauge" >> "$DEBUG"
    local total=${#MODULES[@]}
    #local completed
    local completed=$(count_completed_modules)
    #echo "DEBUG: show_progress_gauge completed=${completed}" >> "$DEBUG"
    local percent=$(( completed * 100 / total ))

    {
        echo "XXX"
        echo "$percent"
        echo "$completed of $total modules completed"
        echo "XXX"
        sleep 1
    } | dialog --gauge "Lab Progress" 10 50 0
}

show_progress_summary() {
    local total=${#MODULES[@]}
    local completed=$(count_completed_modules)
    local percent=$(( completed * 100 / total ))
    local msg="Progress: $completed of $total modules completed.\n\n"

    for mod in "${MODULES[@]}"; do
        if grep -Fq "^$mod	" "$TRACKER_FILE" 2>/dev/null; then
            msg+="✅ $mod\n"
        else
            msg+="   $mod\n"
        fi
    done

    TERM=tmux-256color DIALOGRC="${TOP_DIR}/dialogrc" \
    dialog --backtitle "Lab Progress" \
           --title "Module Completion Summary" \
           --msgbox "$msg" 20 70
}

mark_completed() {
    local module="$1"
    local start="$2"
    local op="$3"
    local end
    end=$(date +%Y-%m-%dT%H:%M:%S)
    local duration=$(( $(date -d "$end" +%s) - $(date -d "$start" +%s) ))

    echo -e "${module}\t${op}\t${start}\t${duration}\t${end}" >> $TRACKER_FILE
}

is_completed() {
    grep -Fq "^$1	" "$TRACKER_FILE" 2>/dev/null
}

print_tracker_summary() {

    echo -e "\e[7mModule\t\t\t\t\tStart Time\t\tDuration(s)\tEnd Time\e[0m"
    echo "--------------------------------------------------------------------------------------------------"
    column -t -s $'\t' "$TRACKER_FILE"
}


#is_completed() {
#    grep -Fxq "$1" "$TRACKER_FILE" 2>/dev/null
#}

choose_topic() {
    OPTIONS=()
    for i in "${!MODULES[@]}"; do
        label="${MODULES[$i]}"
        if is_completed "$label"; then
            label="✅ $label"
        fi
        OPTIONS+=("$i" "$label")
    done

    selection=$(dialog --clear \
        --backtitle "Choose Topic" \
        --title "Available Topics" \
        --menu "Select a topic to start or redo:" 20 70 12 \
        "${OPTIONS[@]}" \
        3>&1 1>&2 2>&3)

    echo "$selection"
}


main() {

    if [[ -n "$1" ]]; then
        export MODULES=("$1")
    else
        # Default to full list
        export MODULES=(
            $(find "$MARKDOWN_DIR" -maxdepth 1 -type f -name "*.md" \
              -exec basename {} .md \; | sort)
        )
    fi

    submit_results() {
        clear
        TERM=tmux-256color DIALOGRC="${TOP_DIR}/dialogrc" \
        dialog --backtitle "Submit work?" \
               --title "Submit work?" \
               --yesno "Do you want to submit the work for this module?" 7 50

        response=$?
        clear

        if [[ $response -eq 0 ]]; then
            echo "Submitting..."
            submit_lab.sh $1
            echo "Work submitted..."
            pause
        fi
    }

    run_module_on_sigint() {
        response="$(yesno 'Exit?' 'Exit?' 'You pressed Ctrl+C.\nDo you want to exit the module?')"
        if [[ $response -eq 0 ]]; then
            echo "Exiting..."
            exit 130
        else
            # User wants to stay — let them choose a topic
            current_index=$(choose_topic)
            clear
            echo "Press Enter to continue..."
        fi
    }

    choose_topic() {
        OPTIONS=()
        for i in "${!SLIDES[@]}"; do
            OPTIONS+=("$i" "$(basename ${SLIDES[$i]} | sed 's/\.md$//')")
        done

        selection=$(
            TERM=tmux-256color DIALOGRC=${TOP_DIR}/dialogrc \
            dialog --clear \
            --backtitle "Choose Topic" \
            --title "Available Topics" \
            --menu "Select a topic to visit:" 20 70 12 \
            "${OPTIONS[@]}" \
            3>&1 1>&2 2>&3)

        echo "$selection"
    }

    function show_slide() {
        clear
        echo "Reading Slide $((INDEX+1)) of $TOTAL Topic: $1"
        echo "------------------------------------------------------------"
        if [[ -f "${SLIDES[$INDEX]}" ]]; then
            ${CAT_CMD} "${SLIDES[$INDEX]}"
        fi
        echo
    }

    function playcast() {
        local cast_file="$1"
        if [[ -f "$cast_file" && -x "$cast_file" ]]; then
            echo "Playing cast animation: $cast_file"
            ${VPLAYER} "$cast_file"
        fi
    }


    export -f run_module_on_sigint

    clear
    cd "$BASE_DIR" || exit 1

    export MODULES=(
        $(find "$MARKDOWN_DIR" -maxdepth 1 -type f -name "*.md" \
            -exec basename {} .md \; | sort)
    )


    CONTENT_DIR="$MARKDOWN_DIR"
    SLIDES=("$CONTENT_DIR"/*.md)
    TOTAL=${#SLIDES[@]}
    INDEX=0

    trap 'run_module_on_sigint' SIGINT
    while true; do
        start_time=$(date +%Y-%m-%dT%H:%M:%S)
        TOPIC=$(basename "${SLIDES[$INDEX]}" .md)
        show_slide "$TOPIC"
        read -rsn1 -p $'\nEnter choice: [\e[1;33mg\e[0m] Goto [\e[1;33mn\e[0m] Next  [\e[1;33mp\e[0m] Prev  [\e[1;33mq\e[0m] Quit (Back to Menu): ' key
        if [[ $key == $'\e' ]]; then
            read -rsn2 rest  # read next two bytes
            key+=$rest
        fi
        if [[ $key == 'g' ]]; then
            echo "Choose a topic to go to:"
            I=$(choose_topic)
            if [[ ! -z "$I" ]]; then
                INDEX=$I
            fi
            continue
        fi
        cast_file="$CONTENT_DIR/${TOPIC}.cast"
        script_file="$DEMO_DIR/${TOPIC}.sh"
        quiz_file="$CONTENT_DIR/${TOPIC}.quiz.yaml"
        mark_completed "$TOPIC" "$start_time" "read"
        # check if there is an exercise for this topic
        if [[ ($key == $'\e[C' || $key == 'n') && -f "$script_file" && -x "$script_file" ]]; then
            start_time=$(date +%Y-%m-%dT%H:%M:%S)
            if [[ ! -s "$script_file" ]]; then
                recorder
            else
                recorder "$script_file"
            fi
            mark_completed "$TOPIC" "$start_time" "exercise"
            pause
        fi
        if [[ ($key == $'\e[C' || $key == 'n') && -f "$cast_file" ]]; then
            start_time=$(date +%Y-%m-%dT%H:%M:%S)
            if [[ ! -s "$cast_file" ]]; then
                playcast "$cast_file"
            fi
            mark_completed "$TOPIC" "$start_time" "animation"
            pause
        fi
        case "$key" in
            $'\e[C' | n) # right arrow or 'n' for next
                if (( INDEX == TOTAL - 1));then
                    break;
                fi
                if (( INDEX < TOTAL - 1 )); then
                    ((INDEX++))
                fi
                ;;
            $'\e[D' | p) # left arrow or 'p' for previous
                if (( INDEX > 0 )); then
                    ((INDEX--))
                fi
                ;;
            q)
                clear
                echo "Exiting Slide Viewer."
                break
                ;;
        esac
    done
    # check if there is a quiz for this module
    quiz_file="$CONTENT_DIR/quiz.yaml"
    if [[ -f "$quiz_file" ]]; then
        clear
        start_time=$(date +%Y-%m-%dT%H:%M:%S)
        if ! quiz "$quiz_file"; then
            echo "Quiz failed. Please try again."
        else
            mark_completed "$module" "$start_time" "quiz"
            echo "Quiz completed successfully!"
        fi
    fi
    fullpath=$(echo $(dirname "$MARKDOWN_DIR"))
    IFS='/' read -ra parts <<< "$fullpath"
    len=${#parts[@]}
    module=$(echo "${parts[len-2]}/${parts[len-1]}"| tr '/' '_')
    submit_results $module
    echo "Mission Complete!"
    pause
}
main "$@"
